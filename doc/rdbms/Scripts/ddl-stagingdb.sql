-- BEGIN
-- 
--  Copyright 2025; RÃ©al Demers.
-- 
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
-- 
--     http://www.apache.org/licenses/LICENSE-2.0
-- 
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-- 
--  DDL for the staging database.
--  Simple database definition.

-- DROP SECTION.
DROP TABLE IF EXISTS PUBLIC.REQUEST;
DROP TABLE IF EXISTS PUBLIC.INVENTORY;
DROP TABLE IF EXISTS PUBLIC.PRODUCT;
DROP TABLE IF EXISTS PUBLIC.PERSON;

--
-- Person table.
--
CREATE TABLE PUBLIC.PERSON (
	PERSON_ID  INTEGER               NOT NULL AUTO_INCREMENT,
	FIRST_NAME CHARACTER VARYING(64) NOT NULL,
	LAST_NAME  CHARACTER VARYING(64) NOT NULL,

	CONSTRAINT PERSON_PK PRIMARY KEY (PERSON_ID)
);
CREATE UNIQUE INDEX PERSON_FIRST_LAST_NAME_IDX ON PUBLIC.PERSON (FIRST_NAME,LAST_NAME);

--
-- Product table.
--
CREATE TABLE PUBLIC.PRODUCT (
	PRODUCT_ID INTEGER                 NOT NULL AUTO_INCREMENT,
	CODE        CHARACTER VARYING(64)  NOT NULL,
	DESCRIPTION CHARACTER VARYING(128) NOT NULL,
	PRICE       DECIMAL(10, 2)         NOT NULL,
	
	CONSTRAINT PRODUCT_PK     PRIMARY KEY (PRODUCT_ID),
	CONSTRAINT PRODUCT_UNIQUE UNIQUE (CODE)
);

--
-- Inventory table.
--
CREATE TABLE PUBLIC.INVENTORY (
	INVENTORY_ID INTEGER NOT NULL AUTO_INCREMENT,
	PRODUCT_ID   INTEGER NOT NULL,
	QTY 		 INTEGER NOT NULL,
	
	CONSTRAINT INVENTORY_PK         PRIMARY KEY (INVENTORY_ID),
	CONSTRAINT INVENTORY_PRODUCT_FK FOREIGN KEY (PRODUCT_ID) REFERENCES PUBLIC.PRODUCT(PRODUCT_ID)
);
--
CREATE UNIQUE INDEX INVENTORY_INVENTORY_ID_IDX ON PUBLIC.INVENTORY (INVENTORY_ID, PRODUCT_ID);

--
-- Request table.
--
CREATE TABLE PUBLIC.REQUEST (
	REQUEST_ID 	INTEGER NOT NULL AUTO_INCREMENT,
	PERSON_ID 	INTEGER NOT NULL,
	PRODUCT_ID 	INTEGER NOT NULL,
	QTY 		INTEGER NOT NULL,
	OPERATION 	INTEGER NOT NULL,
	RESULT 		INTEGER NOT NULL,
	
	CONSTRAINT REQUEST_PK         PRIMARY KEY (REQUEST_ID),
	CONSTRAINT REQUEST_PERSON_FK  FOREIGN KEY (PERSON_ID)  REFERENCES PUBLIC.PERSON(PERSON_ID) 
	                              ON DELETE RESTRICT ON UPDATE RESTRICT,
	CONSTRAINT REQUEST_PRODUCT_FK FOREIGN KEY (PRODUCT_ID) REFERENCES PUBLIC.PRODUCT(PRODUCT_ID)
	                              ON DELETE RESTRICT ON UPDATE RESTRICT
);

--
-- Populate the database.
--

-- Person.
INSERT INTO PUBLIC.PERSON (PERSON_ID, FIRST_NAME, LAST_NAME) VALUES(10,  'John',   'Wick');
INSERT INTO PUBLIC.PERSON (PERSON_ID, FIRST_NAME, LAST_NAME) VALUES(20,  'Jack',   'Sparrow');
INSERT INTO PUBLIC.PERSON (PERSON_ID, FIRST_NAME, LAST_NAME) VALUES(30,  'Conan',  'Barbarian');
INSERT INTO PUBLIC.PERSON (PERSON_ID, FIRST_NAME, LAST_NAME) VALUES(40,  'Suzan',  'Mayer');
INSERT INTO PUBLIC.PERSON (PERSON_ID, FIRST_NAME, LAST_NAME) VALUES(50,  'Johnny', 'Cash');
INSERT INTO PUBLIC.PERSON (PERSON_ID, FIRST_NAME, LAST_NAME) VALUES(60,  'Tony',   'Stark');
INSERT INTO PUBLIC.PERSON (PERSON_ID, FIRST_NAME, LAST_NAME) VALUES(70,  'Sophia', 'Madria');
INSERT INTO PUBLIC.PERSON (PERSON_ID, FIRST_NAME, LAST_NAME) VALUES(80,  'Olivia', 'Newton');
INSERT INTO PUBLIC.PERSON (PERSON_ID, FIRST_NAME, LAST_NAME) VALUES(90,  'James',  'Bond');
INSERT INTO PUBLIC.PERSON (PERSON_ID, FIRST_NAME, LAST_NAME) VALUES(100, 'Franceska', 'Spinoza');

-- Product.
INSERT INTO PUBLIC.PRODUCT (PRODUCT_ID, CODE, DESCRIPTION, PRICE) VALUES(10,  'Apple',  'Mcinstosh Apple',         9.99);
INSERT INTO PUBLIC.PRODUCT (PRODUCT_ID, CODE, DESCRIPTION, PRICE) VALUES(20,  'Banana', 'Banana split',            4.99);
INSERT INTO PUBLIC.PRODUCT (PRODUCT_ID, CODE, DESCRIPTION, PRICE) VALUES(30,  'Steak',  'T-Bone Steak 4Pack',     49.99);
INSERT INTO PUBLIC.PRODUCT (PRODUCT_ID, CODE, DESCRIPTION, PRICE) VALUES(40,  'Oats',   'Quaker Quick Oats',       9.99);
INSERT INTO PUBLIC.PRODUCT (PRODUCT_ID, CODE, DESCRIPTION, PRICE) VALUES(50,  'Soup',   'Campbells chicken soup',  0.99);
INSERT INTO PUBLIC.PRODUCT (PRODUCT_ID, CODE, DESCRIPTION, PRICE) VALUES(60,  'Milk',   'Milk 2% - Lactose free',  4.99);
INSERT INTO PUBLIC.PRODUCT (PRODUCT_ID, CODE, DESCRIPTION, PRICE) VALUES(70,  'Bread',  'Multigrain bread',        5.99);
INSERT INTO PUBLIC.PRODUCT (PRODUCT_ID, CODE, DESCRIPTION, PRICE) VALUES(80,  'Juice',  'Grapefruit juice',        3.99);
INSERT INTO PUBLIC.PRODUCT (PRODUCT_ID, CODE, DESCRIPTION, PRICE) VALUES(90,  'Patato', 'Bag of patatos',          4.99);
INSERT INTO PUBLIC.PRODUCT (PRODUCT_ID, CODE, DESCRIPTION, PRICE) VALUES(100, 'Fish',   'Atlantic Cod fish',      29.99);

-- Inventory.
INSERT INTO PUBLIC.INVENTORY (INVENTORY_ID, PRODUCT_ID, QTY) VALUES(10,   10, 1000); -- Apple.
INSERT INTO PUBLIC.INVENTORY (INVENTORY_ID, PRODUCT_ID, QTY) VALUES(20,   20, 1000); -- Banana.
INSERT INTO PUBLIC.INVENTORY (INVENTORY_ID, PRODUCT_ID, QTY) VALUES(30,   30, 1000); -- Steak.
INSERT INTO PUBLIC.INVENTORY (INVENTORY_ID, PRODUCT_ID, QTY) VALUES(40,   40, 1000); -- Oats.
INSERT INTO PUBLIC.INVENTORY (INVENTORY_ID, PRODUCT_ID, QTY) VALUES(50,   50, 1000); -- Chicken soup.
INSERT INTO PUBLIC.INVENTORY (INVENTORY_ID, PRODUCT_ID, QTY) VALUES(60,   60, 1000); -- Milk.
INSERT INTO PUBLIC.INVENTORY (INVENTORY_ID, PRODUCT_ID, QTY) VALUES(70,   70, 1000); -- Bread.
INSERT INTO PUBLIC.INVENTORY (INVENTORY_ID, PRODUCT_ID, QTY) VALUES(80,   80, 1000); -- Juice.
INSERT INTO PUBLIC.INVENTORY (INVENTORY_ID, PRODUCT_ID, QTY) VALUES(90,   90, 1000); -- Patato.
INSERT INTO PUBLIC.INVENTORY (INVENTORY_ID, PRODUCT_ID, QTY) VALUES(100, 100, 1000); -- Fish.

-- Request.
-- OPERATION : 10-PULL, 20-PUSH, 30-REFILL, 40-REGENERATE.
-- RESULT    : 10-PENDING, 20-BACK-ORDER, 30-EXECUTED,  99-ERROR.
INSERT INTO PUBLIC.REQUEST (REQUEST_ID, PERSON_ID, PRODUCT_ID, QTY, OPERATION, RESULT)
     VALUES(10,   10, 10,  10, 10, 10);
INSERT INTO PUBLIC.REQUEST (REQUEST_ID, PERSON_ID, PRODUCT_ID, QTY, OPERATION, RESULT)
     VALUES(20,   20, 20,  10, 10, 10);
INSERT INTO PUBLIC.REQUEST (REQUEST_ID, PERSON_ID, PRODUCT_ID, QTY, OPERATION, RESULT)
     VALUES(30,   30, 30,  10, 10, 10);
INSERT INTO PUBLIC.REQUEST (REQUEST_ID, PERSON_ID, PRODUCT_ID, QTY, OPERATION, RESULT)
     VALUES(40,   40, 40,  10, 10, 10);
INSERT INTO PUBLIC.REQUEST (REQUEST_ID, PERSON_ID, PRODUCT_ID, QTY, OPERATION, RESULT)
     VALUES(50,   50, 50,  10, 10, 10);
INSERT INTO PUBLIC.REQUEST (REQUEST_ID, PERSON_ID, PRODUCT_ID, QTY, OPERATION, RESULT)
     VALUES(60,   60, 60,  10, 10, 10);
INSERT INTO PUBLIC.REQUEST (REQUEST_ID, PERSON_ID, PRODUCT_ID, QTY, OPERATION, RESULT)
     VALUES(70,   70, 70,  10, 10, 10);
INSERT INTO PUBLIC.REQUEST (REQUEST_ID, PERSON_ID, PRODUCT_ID, QTY, OPERATION, RESULT)
     VALUES(80,   80, 80,  10, 10, 10);
INSERT INTO PUBLIC.REQUEST (REQUEST_ID, PERSON_ID, PRODUCT_ID, QTY, OPERATION, RESULT)
     VALUES(90,   90, 90,  10, 10, 10);
INSERT INTO PUBLIC.REQUEST (REQUEST_ID, PERSON_ID, PRODUCT_ID, QTY, OPERATION, RESULT)
     VALUES(100, 100, 100, 10, 10, 10);
-- END