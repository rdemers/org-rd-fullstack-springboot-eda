@Bean
public ProducerFactory<Long, Object> producerFactory() {
    Map<String, Object> configProps = new HashMap<>();
    configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
    configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, LongSerializer.class);
    configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);

    // Garder les informations de type dans les en-t√™tes
    // (utile si tu veux d√©s√©rialiser automatiquement c√¥t√© consumer)
    configProps.put(JsonSerializer.ADD_TYPE_INFO_HEADERS, true);

    return new DefaultKafkaProducerFactory<>(configProps);
}

@Bean
public KafkaTemplate<Long, Object> kafkaTemplate() {
    return new KafkaTemplate<>(producerFactory());
}


configProps.put(JsonSerializer.ADD_TYPE_INFO_HEADERS, true);



package com.example.demo.config;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.common.serialization.LongDeserializer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.annotation.EnableKafka;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;
import org.springframework.kafka.support.serializer.JsonDeserializer;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;

import java.util.HashMap;
import java.util.Map;

@EnableKafka
@Configuration
public class KafkaConsumerConfig {

    @Bean
    public DefaultKafkaConsumerFactory<Long, Object> consumerFactory(ObjectMapper objectMapper) {
        JsonDeserializer<Object> deserializer = new JsonDeserializer<>(Object.class, objectMapper, false);
        deserializer.addTrustedPackages("*"); // Autorise toutes les classes √† √™tre d√©s√©rialis√©es
        deserializer.ignoreTypeHeaders(false); // On lit les _type headers envoy√©s par le producer

        Map<String, Object> props = new HashMap<>();
        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        props.put(ConsumerConfig.GROUP_ID_CONFIG, "generic-consumer-group");
        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, LongDeserializer.class);
        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class);

        return new DefaultKafkaConsumerFactory<>(props, new LongDeserializer(), deserializer);
    }

    @Bean
    public ConcurrentKafkaListenerContainerFactory<Long, Object> kafkaListenerContainerFactory(
            DefaultKafkaConsumerFactory<Long, Object> consumerFactory) {

        ConcurrentKafkaListenerContainerFactory<Long, Object> factory =
                new ConcurrentKafkaListenerContainerFactory<>();
        factory.setConsumerFactory(consumerFactory);
        return factory;
    }
}


package com.example.demo.consumer;

import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.stereotype.Component;

@Component
public class GenericEventConsumer {

    @KafkaListener(topics = "events-topic", groupId = "generic-consumer-group")
    public void listen(@Payload Object event) {
        System.out.println("üì• Re√ßu un √©v√©nement : " + event);
        System.out.println("Type r√©el : " + event.getClass().getName());
    }
}


spring:
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: generic-consumer-group
      key-deserializer: org.apache.kafka.common.serialization.LongDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.example.demo.model"
        spring.json.use.type.headers: true

spring:
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}




package com.example.demo.config;

import org.apache.kafka.common.serialization.LongDeserializer;
import org.springframework.boot.autoconfigure.kafka.ConcurrentKafkaListenerContainerFactoryConfigurer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.annotation.EnableKafka;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.core.ConsumerFactory;

@EnableKafka
@Configuration
public class KafkaConsumerConfig {

    @Bean
    public ConcurrentKafkaListenerContainerFactory<Long, Object> kafkaListenerContainerFactory(
            ConcurrentKafkaListenerContainerFactoryConfigurer configurer,
            ConsumerFactory<Long, Object> consumerFactory) {

        ConcurrentKafkaListenerContainerFactory<Long, Object> factory =
                new ConcurrentKafkaListenerContainerFactory<>();
        configurer.configure(factory, consumerFactory);
        return factory;
    }
}


import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;

@Configuration
public class KafkaPropertiesExample {

    @Value("${spring.kafka.bootstrap-servers}")
    private String bootstrapServers;

    // Par exemple, l‚Äôafficher ou l‚Äôutiliser
    @PostConstruct
    public void logKafkaServer() {
        System.out.println("Kafka connect√© √† : " + bootstrapServers);
    }
}


spring:
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}

    producer:
      key-serializer: org.apache.kafka.common.serialization.LongSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: true




package com.example.demo.config;

import com.example.demo.model.UserEvent;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.annotation.EnableKafka;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;



Spring Boot auto-configure d√©j√† le ProducerFactory et le KafkaTemplate si les propri√©t√©s spring.kafka.producer.* sont pr√©sentes.
@Configuration
@EnableKafka
public class KafkaProducerConfig {

    // Ici, Spring Boot injecte automatiquement la bonne factory
    @Bean
    public KafkaTemplate<Long, Object> kafkaTemplate(ProducerFactory<Long, Object> producerFactory) {
        return new KafkaTemplate<>(producerFactory);
    }
}


import jakarta.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;

@Configuration
public class KafkaPropertiesLogger {

    @Value("${spring.kafka.bootstrap-servers}")
    private String bootstrapServers;

    @PostConstruct
    public void printKafkaServers() {
        System.out.println("‚úÖ Kafka Producer connect√© √† : " + bootstrapServers);
    }
}


package com.example.demo.service;

import com.example.demo.model.UserEvent;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

@Service
public class UserEventProducer {

    private final KafkaTemplate<Long, Object> kafkaTemplate;

    public UserEventProducer(KafkaTemplate<Long, Object> kafkaTemplate) {
        this.kafkaTemplate = kafkaTemplate;
    }

    public void sendUserEvent(Long userId, String action) {
        UserEvent event = new UserEvent(String.valueOf(userId), action, System.currentTimeMillis());
        kafkaTemplate.send("events-topic", userId, event);
        System.out.println("üì§ Message envoy√© : " + event);
    }
}



import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.kafka.test.context.EmbeddedKafka;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;

@SpringBootTest
@EmbeddedKafka(partitions = 1, topics = { "events-topic" })
public class UserEventProducerTest {

    @DynamicPropertySource
    static void overrideKafkaBootstrap(DynamicPropertyRegistry registry) {
        registry.add("spring.kafka.bootstrap-servers",
            () -> System.getProperty("spring.embedded.kafka.brokers"));
    }

    // Tes tests ici...
}



package com.example.demo;

import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.common.serialization.StringSerializer;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.springframework.kafka.test.EmbeddedKafkaBroker;

import java.time.Duration;
import java.util.List;
import java.util.Map;

public class ManualEmbeddedKafkaExample {

    public static void main(String[] args) {
        // üîπ 1Ô∏è‚É£ Cr√©er un broker Kafka embarqu√© avec 1 broker et 1 partition
        EmbeddedKafkaBroker embeddedKafka = new EmbeddedKafkaBroker(1, true, 1, "test-topic");
        
        // üîπ 2Ô∏è‚É£ D√©marrer le broker
        embeddedKafka.afterPropertiesSet(); // √©quivalent √† "start()"

        String bootstrapServers = embeddedKafka.getBrokersAsString();
        System.out.println("üöÄ Kafka embarqu√© d√©marr√© sur : " + bootstrapServers);

        // üîπ 3Ô∏è‚É£ Cr√©er un producer Kafka (simple)
        var producerProps = Map.of(
                ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers,
                ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class,
                ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class
        );

        try (var producer = new KafkaProducer<String, String>(producerProps)) {
            producer.send(new ProducerRecord<>("test-topic", "key1", "Hello Kafka Embedded!"));
            producer.flush();
            System.out.println("‚úÖ Message envoy√© !");
        }

        // üîπ 4Ô∏è‚É£ Cr√©er un consumer Kafka pour lire le message
        var consumerProps = Map.of(
                ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers,
                ConsumerConfig.GROUP_ID_CONFIG, "test-group",
                ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest",
                ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class,
                ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class
        );

        try (var consumer = new KafkaConsumer<String, String>(consumerProps)) {
            consumer.subscribe(List.of("test-topic"));
            ConsumerRecords<String, String> records = consumer.poll(Duration.ofSeconds(3));
            records.forEach(record ->
                System.out.printf("üì• Re√ßu : key=%s, value=%s, topic=%s%n",
                        record.key(), record.value(), record.topic())
            );
        }

        // üîπ 5Ô∏è‚É£ Arr√™ter le broker proprement
        embeddedKafka.destroy();
        System.out.println("üõë Kafka embarqu√© arr√™t√©.");
    }
}


EmbeddedKafkaBroker embeddedKafka = new EmbeddedKafkaBroker(1, true, 1, "test-topic");

// ‚ö° FORCER LE PORT AVANT de d√©marrer le broker
embeddedKafka.kafkaPorts(9093);

// d√©marrer le broker
embeddedKafka.afterPropertiesSet();

System.out.println("Kafka embarqu√© d√©marr√© sur : " + embeddedKafka.getBrokersAsString());




try (var socket = new java.net.ServerSocket(9093)) {
    System.out.println("Port 9093 libre !");
} catch (Exception e) {
    System.out.println("Port 9093 d√©j√† utilis√© !");
}



@DynamicPropertySource
static void overrideKafkaBootstrap(DynamicPropertyRegistry registry) {
    EmbeddedKafkaBroker embeddedKafka = new EmbeddedKafkaBroker(1, true, 1, "events-topic");
    embeddedKafka.kafkaPorts(9093);      // ‚ö° port forc√©
    embeddedKafka.afterPropertiesSet();  // d√©marrage

    registry.add("spring.kafka.bootstrap-servers", embeddedKafka::getBrokersAsString);
}





